{ parameter
    (or (or %admin
           (or (or (pair %burn_tokens (pair (nat %amount) (address %owner)) (nat %token_id))
                   (pair %create_token (string %descriptor) (nat %token_id)))
               (or (pair %mint_tokens
                      (pair (nat %amount) (bytes %data))
                      (pair (address %owner) (nat %token_id)))
                   (pair %mint_tokens_batch
                      (pair (list %batch (pair (nat %amount) (nat %token_id))) (bytes %data))
                      (address %owner))))
           (or (bool %pause) (address %set_admin)))
        (or %assets
           (or (or (pair %balance_of
                      (pair %balance_request (address %owner) (nat %token_id))
                      (lambda %balance_view (pair (pair (address %owner) (nat %token_id)) nat) operation))
                   (pair %balance_of_batch
                      (list %balance_request (pair (address %owner) (nat %token_id)))
                      (lambda %balance_view
                         (list (pair (pair (address %owner) (nat %token_id)) nat))
                         operation)))
               (or (pair %is_approved_for_all
                      (lambda %approved_view
                         (pair (pair (address %operator) (address %owner)) bool)
                         operation)
                      (pair %is_approved_for_all_request (address %operator) (address %owner)))
                   (pair %safe_batch_transfer_from
                      (pair (list %batch (pair (nat %amount) (nat %token_id))) (bytes %data))
                      (pair (address %from_) (address %to_)))))
           (or (pair %safe_transfer_from
                  (pair (pair (nat %amount) (bytes %data)) (pair (address %from_) (address %to_)))
                  (nat %token_id))
               (pair %set_approval_for_all (bool %approved) (address %operator))))) ;
  storage
    (pair (pair %admin (pair (address %admin) (bool %paused)) (map %tokens nat string))
          (pair %assets
             (big_map %approvals address (set address))
             (pair %balance_storage
                (map %balances nat nat)
                (pair %owners (nat %owner_count) (map %owners address nat))))) ;
  code { LAMBDA unit int { DROP ; PUSH int 77 } ;
         LAMBDA
           (pair (pair bool address) (big_map address (set address)))
           (big_map address (set address))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             SENDER ;
             GET ;
             IF_NONE { EMPTY_SET address } {} ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             IF { DIP 2 { DUP } ;
                  DIG 2 ;
                  CDR ;
                  DIP { DUP ; PUSH bool True } ;
                  UPDATE }
                { DIP 2 { DUP } ;
                  DIG 2 ;
                  CDR ;
                  DIP { DUP ; PUSH bool False } ;
                  UPDATE } ;
             DUP ;
             SIZE ;
             PUSH nat 0 ;
             SWAP ;
             COMPARE ;
             EQ ;
             IF { DIP 2 { DUP } ; DIG 2 ; NONE (set address) ; SENDER ; UPDATE }
                { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 } ; SENDER ; UPDATE } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
         LAMBDA
           (pair (pair (lambda (pair (pair address address) bool) operation) (pair address address))
                 (big_map address (set address)))
           operation
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             GET ;
             DUP ;
             IF_NONE
               { PUSH bool False }
               { DIP 2 { DUP } ; DIG 2 ; CAR ; DIP { DUP } ; MEM ; SWAP ; DROP } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
             EXEC ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         PUSH nat 4294967295 ;
         PUSH nat 4294967296 ;
         LAMBDA
           (pair address (pair nat (map address nat)))
           (pair nat (pair nat (map address nat)))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             PUSH nat 1 ;
             ADD ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP ; SOME ; DIP { DIP { DUP } ; SWAP ; CDR } } ;
             UPDATE ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         LAMBDA
           (pair (lambda (pair address (pair nat (map address nat))) (pair nat (pair nat (map address nat))))
                 (pair address (pair nat (map address nat))))
           (pair nat (pair nat (map address nat)))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; CDR } ;
             GET ;
             DUP ;
             IF_NONE
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 DIP { DIP { DUP } ; SWAP } ;
                 PAIR ;
                 DIP { DIP 4 { DUP } ; DIG 4 } ;
                 EXEC }
               { DUP ; DIP { DIP 2 { DUP } ; DIG 2 } ; PAIR ; SWAP ; DROP } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
         SWAP ;
         LAMBDA
           (pair address (pair nat (map address nat)))
           nat
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; CDR } ;
             GET ;
             DUP ;
             IF_NONE { PUSH string "No such owner" ; FAILWITH } {} ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         LAMBDA
           (pair (pair nat nat) (pair nat nat))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             COMPARE ;
             GT ;
             IF { PUSH string "provided token ID is out of allowed range" ; FAILWITH }
                { DUP ;
                  DIP { DIP { DUP } ; SWAP ; DIP { DIP 3 { DUP } ; DIG 3 } ; MUL } ;
                  ADD } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DUP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat nat) nat) (lambda (pair address (pair nat (map address nat))) nat))
                 (pair (pair address nat) (pair nat (map address nat))))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DUP ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DUP } ; SWAP } ; DUP ; DIP { PAIR } ; SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat nat) nat)
                       (lambda (pair address (pair nat (map address nat))) (pair nat (pair nat (map address nat)))))
                 (pair (pair address nat) (pair nat (map address nat))))
           (pair nat (pair nat (map address nat)))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DUP ;
             CAR ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DUP } ;
         SWAP ;
         LAMBDA
           (pair nat (map nat nat))
           nat
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             GET ;
             DUP ;
             IF_NONE { PUSH nat 0 } {} ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat (map nat nat)) nat)
                       (lambda (pair (pair address nat) (pair nat (map address nat))) nat))
                 (pair (pair address nat) (pair (map nat nat) (pair nat (map address nat)))))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CAR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DUP ;
         LAMBDA
           (pair (lambda (pair (pair address nat) (pair (map nat nat) (pair nat (map address nat)))) nat)
                 (pair (pair (pair address nat) (lambda (pair (pair address nat) nat) operation))
                       (pair (map nat nat) (pair nat (map address nat)))))
           operation
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 } ;
             EXEC ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             EXEC ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DUP } ;
         SWAP ;
         LAMBDA
           (pair (lambda (pair (pair address nat) (pair (map nat nat) (pair nat (map address nat)))) nat)
                 (pair (pair (list (pair address nat)) (lambda (list (pair (pair address nat) nat)) operation))
                       (pair (map nat nat) (pair nat (map address nat)))))
           operation
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
             DUP ;
             DIP { PAIR } ;
             SWAP ;
             LAMBDA
               (pair (pair (pair (map nat nat) (pair nat (map address nat)))
                           (lambda (pair (pair address nat) (pair (map nat nat) (pair nat (map address nat)))) nat))
                     (pair address nat))
               (pair (pair address nat) nat)
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DIP { DUP ; CDR ; SWAP ; CAR } ;
                 DUP ;
                 DIP { DIP { DUP } ; SWAP } ;
                 PAIR ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 EXEC ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DUP } ;
                 PAIR ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP } ;
             SWAP ;
             APPLY ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             MAP { DUP ;
                   DIP { DIP 2 { DUP } ; DIG 2 } ;
                   PAIR ;
                   DIP { DIP 5 { DUP } ; DIG 5 } ;
                   EXEC ;
                   DIP { DUP } ;
                   SWAP ;
                   DIP { DUP } ;
                   PAIR ;
                   SWAP ;
                   DROP ;
                   SWAP ;
                   DROP } ;
             DUP ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
             EXEC ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
         SWAP ;
         LAMBDA
           (pair (lambda (pair nat (map nat nat)) nat) (pair (pair nat nat) (pair nat (map nat nat))))
           (map nat nat)
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             CAR ;
             DIP 3 { DUP } ;
             DIG 3 ;
             CDR ;
             CDR ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DUP ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             COMPARE ;
             LT ;
             IF { PUSH string "Insufficient balance" ; FAILWITH }
                { DUP ;
                  DIP { DIP 2 { DUP } ; DIG 2 } ;
                  SUB ;
                  ABS ;
                  DUP ;
                  PUSH nat 0 ;
                  SWAP ;
                  COMPARE ;
                  EQ ;
                  IF { DIP 5 { DUP } ;
                       DIG 5 ;
                       DIP { DIP 2 { DUP } ; DIG 2 ; NONE nat } ;
                       UPDATE }
                     { DIP 5 { DUP } ;
                       DIG 5 ;
                       DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 } } ;
                       UPDATE } ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP { DUP } ;
                  PAIR ;
                  DIP { DIP 8 { DUP } ; DIG 8 } ;
                  EXEC ;
                  DUP ;
                  DIP { DIP 5 { DUP } ; DIG 5 } ;
                  ADD ;
                  DIP 7 { DUP } ;
                  DIG 7 ;
                  DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 } } ;
                  UPDATE ;
                  DUP ;
                  DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (pair nat bytes) (pair address address)) nat)
           (list operation)
           { DUP ;
             CAR ;
             CDR ;
             CDR ;
             CONTRACT
               (or (pair (pair (list (pair nat nat)) bytes) (pair (option address) address))
                   (pair (pair (pair nat bytes) (pair (option address) address)) nat)) ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CDR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CAR ; SOME ; SENDER ; SWAP ; PAIR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DUP ;
             RIGHT (pair (pair (list (pair nat nat)) bytes) (pair (option address) address)) ;
             DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             NIL operation ;
             SWAP ;
             CONS ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair (pair (pair nat bytes) (pair address address)) nat) (list operation))
                       (pair (lambda (pair (pair nat nat) (pair nat (map nat nat))) (map nat nat))
                             (pair (lambda
                                      (pair (pair address nat) (pair nat (map address nat)))
                                      (pair nat (pair nat (map address nat))))
                                   (lambda (pair (pair address nat) (pair nat (map address nat))) nat))))
                 (pair (pair (pair (pair nat bytes) (pair address address)) nat)
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (list operation) (pair (map nat nat) (pair nat (map address nat))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             CDR ;
             CDR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; CAR } ;
             PAIR ;
             DIP { DIP 3 { DUP } ;
                   DIG 3 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
                   PAIR } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP 5 { DUP } ;
             DIG 5 ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                                               DUP ;
                                                               DIP { PAIR } ;
                                                               SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     DUP ;
                     DIP { PAIR } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (list (pair nat nat)) bytes) (pair address address))
           (list operation)
           { DUP ;
             CDR ;
             CDR ;
             CONTRACT
               (or (pair (pair (list (pair nat nat)) bytes) (pair (option address) address))
                   (pair (pair (pair nat bytes) (pair (option address) address)) nat)) ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP ; CDR ; CAR ; SOME ; SENDER ; SWAP ; PAIR } ;
             PAIR ;
             DUP ;
             LEFT (pair (pair (pair nat bytes) (pair (option address) address)) nat) ;
             DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             NIL operation ;
             SWAP ;
             CONS ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair (pair (list (pair nat nat)) bytes) (pair address address)) (list operation))
                       (pair (lambda (pair (pair nat nat) (pair nat (map nat nat))) (map nat nat))
                             (pair (lambda (pair nat nat) nat)
                                   (pair (lambda (pair address (pair nat (map address nat))) nat)
                                         (lambda (pair address (pair nat (map address nat))) (pair nat (pair nat (map address nat))))))))
                 (pair (pair (pair (list (pair nat nat)) bytes) (pair address address))
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (list operation) (pair (map nat nat) (pair nat (map address nat))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             CDR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DIP 8 { DUP } ; DIG 8 } ;
             EXEC ;
             DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                     SWAP } ;
                               SWAP } ;
                         SWAP } ;
                   DUP ;
                   DIP { PAIR } ;
                   SWAP } ;
             DUP ;
             DIP { PAIR } ;
             SWAP ;
             LAMBDA
               (pair (pair (pair nat (pair nat (map address nat)))
                           (pair nat
                                 (pair (lambda (pair (pair nat nat) (pair nat (map nat nat))) (map nat nat))
                                       (lambda (pair nat nat) nat))))
                     (pair (map nat nat) (pair nat nat)))
               (map nat nat)
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DIP { DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 DIP { DUP ; CDR } ;
                 PAIR ;
                 DIP { DIP 6 { DUP } ; DIG 6 } ;
                 EXEC ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 DIP { DIP { DUP } ; SWAP ; CDR } ;
                 PAIR ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 EXEC ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DUP } ;
                 PAIR ;
                 DIP { DIP 2 { DUP } ;
                       DIG 2 ;
                       CAR ;
                       DIP { DIP 3 { DUP } ; DIG 3 } ;
                       PAIR } ;
                 PAIR ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 EXEC ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 DIP { DROP ; DROP ; DROP ; DROP } } ;
             SWAP ;
             APPLY ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CAR ;
             CAR ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CAR ;
                    DIP { DUP } ;
                    SWAP ;
                    CDR ;
                    DIP 5 { DUP } ;
                    DIG 5 ;
                    DIP { DUP ; CDR } ;
                    PAIR ;
                    DIP { DIP 11 { DUP } ; DIG 11 } ;
                    EXEC ;
                    DIP 5 { DUP } ;
                    DIG 5 ;
                    CAR ;
                    DIP { DIP { DUP } ; SWAP ; CDR } ;
                    PAIR ;
                    DIP { DIP 12 { DUP } ; DIG 12 } ;
                    EXEC ;
                    DIP { DUP } ;
                    SWAP ;
                    DIP { DUP } ;
                    PAIR ;
                    DIP { DIP 2 { DUP } ;
                          DIG 2 ;
                          CAR ;
                          DIP { DIP 3 { DUP } ; DIG 3 } ;
                          PAIR } ;
                    PAIR ;
                    DIP { DIP 12 { DUP } ; DIG 12 } ;
                    EXEC ;
                    DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
             DUP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP 6 { DUP } ;
             DIG 6 ;
             DIP { DIP 8 { DUP } ; DIG 8 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                                                                                   SWAP } ;
                                                                                             SWAP } ;
                                                                                       SWAP } ;
                                                                                 SWAP } ;
                                                                           SWAP } ;
                                                                     SWAP } ;
                                                               SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             DUP ;
                                             DIP { PAIR } ;
                                             SWAP } ;
                                       DUP ;
                                       DIP { PAIR } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     DUP ;
                     DIP { PAIR } ;
                     SWAP } ;
               SWAP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair address (big_map address (set address)))
           unit
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF { UNIT }
                { DUP ;
                  SENDER ;
                  GET ;
                  DUP ;
                  IF_NONE
                    { PUSH string "operator not approved to transfer tokens" ; FAILWITH }
                    { DIP 3 { DUP } ; DIG 3 ; DIP { DUP } ; MEM ; SWAP ; DROP } ;
                  DUP ;
                  IF { UNIT }
                     { PUSH string "operator not approved to transfer tokens" ; FAILWITH } ;
                  SWAP ;
                  DROP ;
                  SWAP ;
                  DROP } ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair address (big_map address (set address))) unit)
                       (pair (lambda
                                (pair (pair (pair (list (pair nat nat)) bytes) (pair address address))
                                      (pair (map nat nat) (pair nat (map address nat))))
                                (pair (list operation) (pair (map nat nat) (pair nat (map address nat)))))
                             (pair (lambda
                                      (pair (pair (pair (pair nat bytes) (pair address address)) nat)
                                            (pair (map nat nat) (pair nat (map address nat))))
                                      (pair (list operation) (pair (map nat nat) (pair nat (map address nat)))))
                                   (pair (lambda
                                            (pair (pair (list (pair address nat)) (lambda (list (pair (pair address nat) nat)) operation))
                                                  (pair (map nat nat) (pair nat (map address nat))))
                                            operation)
                                         (pair (lambda
                                                  (pair (pair (pair address nat) (lambda (pair (pair address nat) nat) operation))
                                                        (pair (map nat nat) (pair nat (map address nat))))
                                                  operation)
                                               (pair (lambda
                                                        (pair (pair (lambda (pair (pair address address) bool) operation) (pair address address))
                                                              (big_map address (set address)))
                                                        operation)
                                                     (lambda
                                                        (pair (pair bool address) (big_map address (set address)))
                                                        (big_map address (set address)))))))))
                 (pair (or (or (or (pair (pair address nat) (lambda (pair (pair address nat) nat) operation))
                                   (pair (list (pair address nat)) (lambda (list (pair (pair address nat) nat)) operation)))
                               (or (pair (lambda (pair (pair address address) bool) operation) (pair address address))
                                   (pair (pair (list (pair nat nat)) bytes) (pair address address))))
                           (or (pair (pair (pair nat bytes) (pair address address)) nat) (pair bool address)))
                       (pair (big_map address (set address)) (pair (map nat nat) (pair nat (map address nat))))))
           (pair (list operation)
                 (pair (big_map address (set address)) (pair (map nat nat) (pair nat (map address nat)))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DIP { DUP ;
                                     CDR ;
                                     SWAP ;
                                     CAR ;
                                     DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                         PAIR ;
                         DIP { DIP 11 { DUP } ; DIG 11 } ;
                         EXEC ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         PAIR ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP }
                       { DUP ;
                         DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                         PAIR ;
                         DIP { DIP 10 { DUP } ; DIG 10 } ;
                         EXEC ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         PAIR ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP } ;
                     SWAP ;
                     DROP }
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                         PAIR ;
                         DIP { DIP 12 { DUP } ; DIG 12 } ;
                         EXEC ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         PAIR ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP }
                       { DUP ;
                         DUP ;
                         CDR ;
                         CAR ;
                         DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                         PAIR ;
                         DIP { DIP 7 { DUP } ; DIG 7 } ;
                         EXEC ;
                         DIP { DUP } ;
                         SWAP ;
                         DIP { DIP 5 { DUP } ; DIG 5 ; CDR } ;
                         PAIR ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         EXEC ;
                         DIP 6 { DUP } ;
                         DIG 6 ;
                         CAR ;
                         DIP { DUP ; CDR } ;
                         PAIR ;
                         DIP { DUP } ;
                         SWAP ;
                         CAR ;
                         DIP { DUP } ;
                         PAIR ;
                         DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
                     SWAP ;
                     DROP } ;
                 SWAP ;
                 DROP }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                     PAIR ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                     PAIR ;
                     DIP { DIP 9 { DUP } ; DIG 9 } ;
                     EXEC ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CAR ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DROP ; DROP ; DROP ; DROP ; DROP } }
                   { DUP ;
                     DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                     PAIR ;
                     DIP { DIP 12 { DUP } ; DIG 12 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                     PAIR ;
                     DUP ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP ; DROP ; DROP ; DROP } } ;
                 SWAP ;
                 DROP } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA unit unit { DROP ; UNIT } ;
         SWAP ;
         LAMBDA
           (pair address (pair (pair address bool) (map nat string)))
           (pair (pair address bool) (map nat string))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; CAR ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         SWAP ;
         LAMBDA
           (pair bool (pair (pair address bool) (map nat string)))
           (pair (pair address bool) (map nat string))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         SWAP ;
         LAMBDA
           (pair (pair string nat) (pair (pair address bool) (map nat string)))
           (pair (pair address bool) (map nat string))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR } ;
             GET ;
             DUP ;
             IF_NONE
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 DIP { DIP 2 { DUP } ;
                       DIG 2 ;
                       CAR ;
                       SOME ;
                       DIP { DIP { DUP } ; SWAP ; CDR } } ;
                 UPDATE ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR } ;
                 PAIR ;
                 DIP { DUP } ;
                 PAIR ;
                 SWAP ;
                 DROP }
               { PUSH string "token already exists" ; FAILWITH } ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         LAMBDA
           (pair nat (map nat string))
           unit
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             GET ;
             DUP ;
             IF_NONE { PUSH string "token does not exists" ; FAILWITH } { DROP ; UNIT } ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat (map nat nat)) nat)
                       (lambda
                          (pair (pair address nat) (pair nat (map address nat)))
                          (pair nat (pair nat (map address nat)))))
                 (pair (pair (pair nat bytes) (pair address nat))
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (map nat nat) (pair nat (map address nat)))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DUP ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DUP ;
                   DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR } ;
                   ADD ;
                   SOME ;
                   DIP { DIP 2 { DUP } ; DIG 2 ; CAR } } ;
             UPDATE ;
             DUP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DUP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair nat bytes) (pair address nat))
           (list operation)
           { DUP ;
             CDR ;
             CAR ;
             CONTRACT
               (or (pair (pair (list (pair nat nat)) bytes) (pair (option address) address))
                   (pair (pair (pair nat bytes) (pair (option address) address)) nat)) ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
             PAIR ;
             DIP { SENDER ; NONE address ; PAIR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
             PAIR ;
             DUP ;
             RIGHT (pair (pair (list (pair nat nat)) bytes) (pair (option address) address)) ;
             DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             NIL operation ;
             SWAP ;
             CONS ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair (pair nat bytes) (pair address nat)) (list operation))
                       (pair (lambda
                                (pair (pair (pair nat bytes) (pair address nat))
                                      (pair (map nat nat) (pair nat (map address nat))))
                                (pair (map nat nat) (pair nat (map address nat))))
                             (lambda (pair nat (map nat string)) unit)))
                 (pair (pair (pair (pair nat bytes) (pair address nat)) (pair (pair address bool) (map nat string)))
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (list operation) (pair (map nat nat) (pair nat (map address nat))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             CDR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                                                                                                                 SWAP } ;
                                                                                                                           SWAP } ;
                                                                                                                     DUP ;
                                                                                                                     DIP { PAIR } ;
                                                                                                                     SWAP } ;
                                                                                                               SWAP } ;
                                                                                                         SWAP } ;
                                                                                                   SWAP } ;
                                                                                             SWAP } ;
                                                                                       SWAP } ;
                                                                                 SWAP } ;
                                                                           SWAP } ;
                                                                     SWAP } ;
                                                               SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           DUP ;
                           DIP { PAIR } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat (map nat string)) unit)
                       (pair (lambda (pair nat (map nat nat)) nat)
                             (pair (lambda (pair nat nat) nat)
                                   (lambda (pair address (pair nat (map address nat))) (pair nat (pair nat (map address nat)))))))
                 (pair (pair (pair (pair (list (pair nat nat)) bytes) address) (map nat string))
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (map nat nat) (pair nat (map address nat)))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             EXEC ;
             DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                           DUP ;
                                           DIP { PAIR } ;
                                           SWAP } ;
                                     SWAP } ;
                               SWAP } ;
                         DUP ;
                         DIP { PAIR } ;
                         SWAP } ;
                   SWAP } ;
             DUP ;
             DIP { PAIR } ;
             SWAP ;
             LAMBDA
               (pair (pair (pair nat (pair nat (map address nat)))
                           (pair (map nat string)
                                 (pair (lambda (pair nat (map nat string)) unit)
                                       (pair (lambda (pair nat (map nat nat)) nat) (lambda (pair nat nat) nat)))))
                     (pair (map nat nat) (pair nat nat)))
               (map nat nat)
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DIP { DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIP { DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } } ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CDR ;
                 DIP { DIP 4 { DUP } ; DIG 4 } ;
                 PAIR ;
                 DIP { DIP 5 { DUP } ; DIG 5 } ;
                 EXEC ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 DIP { DIP { DUP } ; SWAP ; CDR } ;
                 PAIR ;
                 DIP { DIP 8 { DUP } ; DIG 8 } ;
                 EXEC ;
                 DUP ;
                 DIP { DIP 3 { DUP } ; DIG 3 } ;
                 PAIR ;
                 DIP { DIP 8 { DUP } ; DIG 8 } ;
                 EXEC ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DUP ;
                       DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                       ADD ;
                       SOME ;
                       DIP { DIP 4 { DUP } ; DIG 4 } } ;
                 UPDATE ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 DIP { DROP ; DROP ; DROP ; DROP ; DROP } } ;
             SWAP ;
             APPLY ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CAR ;
             CAR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CAR ;
                    DIP { DUP } ;
                    SWAP ;
                    CDR ;
                    DUP ;
                    CDR ;
                    DIP { DIP 6 { DUP } ; DIG 6 } ;
                    PAIR ;
                    DIP { DIP 9 { DUP } ; DIG 9 } ;
                    EXEC ;
                    DIP 5 { DUP } ;
                    DIG 5 ;
                    CAR ;
                    DIP { DIP { DUP } ; SWAP ; CDR } ;
                    PAIR ;
                    DIP { DIP 12 { DUP } ; DIG 12 } ;
                    EXEC ;
                    DUP ;
                    DIP { DIP 3 { DUP } ; DIG 3 } ;
                    PAIR ;
                    DIP { DIP 12 { DUP } ; DIG 12 } ;
                    EXEC ;
                    DIP { DUP } ;
                    SWAP ;
                    DIP { DUP ;
                          DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                          ADD ;
                          SOME ;
                          DIP { DIP 4 { DUP } ; DIG 4 } } ;
                    UPDATE ;
                    DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
             DUP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP { DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP ;
                   DROP } } ;
         SWAP ;
         APPLY ;
         DUP ;
         LAMBDA
           (pair (pair (list (pair nat nat)) bytes) address)
           (list operation)
           { DUP ;
             CDR ;
             CONTRACT
               (or (pair (pair (list (pair nat nat)) bytes) (pair (option address) address))
                   (pair (pair (pair nat bytes) (pair (option address) address)) nat)) ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
             PAIR ;
             DIP { SENDER ; NONE address ; PAIR } ;
             PAIR ;
             DUP ;
             LEFT (pair (pair (pair nat bytes) (pair (option address) address)) nat) ;
             DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             NIL operation ;
             SWAP ;
             CONS ;
             DIP { DROP ; DROP ; DROP ; DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair (pair (list (pair nat nat)) bytes) address) (list operation))
                       (lambda
                          (pair (pair (pair (pair (list (pair nat nat)) bytes) address) (map nat string))
                                (pair (map nat nat) (pair nat (map address nat))))
                          (pair (map nat nat) (pair nat (map address nat)))))
                 (pair (pair (pair (pair (list (pair nat nat)) bytes) address)
                             (pair (pair address bool) (map nat string)))
                       (pair (map nat nat) (pair nat (map address nat)))))
           (pair (list operation) (pair (map nat nat) (pair nat (map address nat))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                                                                                                                 SWAP } ;
                                                                                                                           SWAP } ;
                                                                                                                     SWAP } ;
                                                                                                               SWAP } ;
                                                                                                         SWAP } ;
                                                                                                   SWAP } ;
                                                                                             SWAP } ;
                                                                                       SWAP } ;
                                                                                 SWAP } ;
                                                                           SWAP } ;
                                                                     SWAP } ;
                                                               SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair nat (map nat nat)) nat)
                       (lambda (pair (pair address nat) (pair nat (map address nat))) nat))
                 (pair (pair (pair nat address) nat) (pair (map nat nat) (pair nat (map address nat)))))
           (pair (map nat nat) (pair nat (map address nat)))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP { DIP { DUP } ; SWAP ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CAR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DUP ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR } ;
             SUB ;
             DUP ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             LT ;
             IF { PUSH string "Insufficient balance" ; FAILWITH }
                { DUP ;
                  PUSH int 0 ;
                  SWAP ;
                  COMPARE ;
                  EQ ;
                  IF { DIP 2 { DUP } ;
                       DIG 2 ;
                       DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; NONE nat } ;
                       UPDATE }
                     { DIP 2 { DUP } ;
                       DIG 2 ;
                       DIP { DUP ; ABS ; SOME ; DIP { DIP 3 { DUP } ; DIG 3 ; CAR } } ;
                       UPDATE } } ;
             DUP ;
             DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                                         DUP ;
                                                         DIP { PAIR } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 DUP ;
                                 DIP { PAIR } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               DUP ;
               DIP { PAIR } ;
               SWAP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair nat address) nat) (pair (map nat nat) (pair nat (map address nat))))
                          (pair (map nat nat) (pair nat (map address nat))))
                       (pair (lambda
                                (pair (pair (pair (pair (list (pair nat nat)) bytes) address)
                                            (pair (pair address bool) (map nat string)))
                                      (pair (map nat nat) (pair nat (map address nat))))
                                (pair (list operation) (pair (map nat nat) (pair nat (map address nat)))))
                             (pair (lambda
                                      (pair (pair (pair (pair nat bytes) (pair address nat)) (pair (pair address bool) (map nat string)))
                                            (pair (map nat nat) (pair nat (map address nat))))
                                      (pair (list operation) (pair (map nat nat) (pair nat (map address nat)))))
                                   (pair (lambda
                                            (pair (pair string nat) (pair (pair address bool) (map nat string)))
                                            (pair (pair address bool) (map nat string)))
                                         (pair (lambda
                                                  (pair bool (pair (pair address bool) (map nat string)))
                                                  (pair (pair address bool) (map nat string)))
                                               (lambda
                                                  (pair address (pair (pair address bool) (map nat string)))
                                                  (pair (pair address bool) (map nat string))))))))
                 (pair (or (or (or (pair (pair nat address) nat) (pair string nat))
                               (or (pair (pair nat bytes) (pair address nat))
                                   (pair (pair (list (pair nat nat)) bytes) address)))
                           (or bool address))
                       (pair (pair (pair address bool) (map nat string))
                             (pair (map nat nat) (pair nat (map address nat))))))
           (pair (list operation)
                 (pair (pair (pair address bool) (map nat string))
                       (pair (map nat nat) (pair nat (map address nat)))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "operation require admin privileges" ; FAILWITH }
                { DIP { DUP } ;
                  SWAP ;
                  IF_LEFT
                    { DUP ;
                      IF_LEFT
                        { DUP ;
                          IF_LEFT
                            { DUP ;
                              DUP ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                              PAIR ;
                              DIP { DIP 7 { DUP } ; DIG 7 } ;
                              EXEC ;
                              DIP 5 { DUP } ;
                              DIG 5 ;
                              CAR ;
                              DIP { DUP } ;
                              PAIR ;
                              DUP ;
                              NIL operation ;
                              PAIR ;
                              DIP { DROP ; DROP ; DROP ; DROP } }
                            { DUP ;
                              DUP ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                              PAIR ;
                              DIP { DIP 10 { DUP } ; DIG 10 } ;
                              EXEC ;
                              DUP ;
                              DIP { DIP 5 { DUP } ; DIG 5 ; CDR } ;
                              PAIR ;
                              DUP ;
                              NIL operation ;
                              PAIR ;
                              DIP { DROP ; DROP ; DROP ; DROP } } ;
                          SWAP ;
                          DROP }
                        { DUP ;
                          IF_LEFT
                            { DUP ;
                              DUP ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                              PAIR ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                              PAIR ;
                              DIP { DIP 9 { DUP } ; DIG 9 } ;
                              EXEC ;
                              DIP 5 { DUP } ;
                              DIG 5 ;
                              CAR ;
                              DIP { DUP ; CDR } ;
                              PAIR ;
                              DIP { DUP } ;
                              SWAP ;
                              CAR ;
                              DIP { DUP } ;
                              PAIR ;
                              DIP { DROP ; DROP ; DROP ; DROP } }
                            { DUP ;
                              DUP ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                              PAIR ;
                              DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                              PAIR ;
                              DIP { DIP 8 { DUP } ; DIG 8 } ;
                              EXEC ;
                              DIP 5 { DUP } ;
                              DIG 5 ;
                              CAR ;
                              DIP { DUP ; CDR } ;
                              PAIR ;
                              DIP { DUP } ;
                              SWAP ;
                              CAR ;
                              DIP { DUP } ;
                              PAIR ;
                              DIP { DROP ; DROP ; DROP ; DROP } } ;
                          SWAP ;
                          DROP } ;
                      SWAP ;
                      DROP }
                    { DUP ;
                      IF_LEFT
                        { DUP ;
                          DUP ;
                          DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                          PAIR ;
                          DIP { DIP 10 { DUP } ; DIG 10 } ;
                          EXEC ;
                          DUP ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                          PAIR ;
                          DUP ;
                          NIL operation ;
                          PAIR ;
                          DIP { DROP ; DROP ; DROP ; DROP } }
                        { DUP ;
                          DUP ;
                          DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                          PAIR ;
                          DIP { DIP 11 { DUP } ; DIG 11 } ;
                          EXEC ;
                          DUP ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                          PAIR ;
                          DUP ;
                          NIL operation ;
                          PAIR ;
                          DIP { DROP ; DROP ; DROP ; DROP } } ;
                      SWAP ;
                      DROP } } ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP } } ;
         SWAP ;
         APPLY ;
         LAMBDA unit unit { DROP ; UNIT } ;
         DIP 36 { DUP } ;
         DIG 36 ;
         CAR ;
         DIP 37 { DUP } ;
         DIG 37 ;
         CDR ;
         DIP { DUP } ;
         SWAP ;
         IF_LEFT
           { DUP ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CDR } ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DUP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; CAR ; DIP { DUP ; CDR } ; PAIR } ;
             PAIR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             PAIR ;
             DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } }
           { DUP ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             CAR ;
             CDR ;
             IF { PUSH string "contract is paused" ; FAILWITH }
                { DUP ;
                  DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                  PAIR ;
                  DIP { DIP 18 { DUP } ; DIG 18 } ;
                  EXEC ;
                  DIP 3 { DUP } ;
                  DIG 3 ;
                  CAR ;
                  DIP { DUP ; CDR } ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  CAR ;
                  DIP { DUP } ;
                  PAIR ;
                  SWAP ;
                  DROP ;
                  SWAP ;
                  DROP } ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         DIP { DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP } } }

